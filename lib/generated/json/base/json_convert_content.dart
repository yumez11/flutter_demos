// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:my_demo/model/hotel_entity.dart';
import 'package:my_demo/generated/json/hotel_entity_helper.dart';
import 'package:my_demo/model/area_entity.dart';
import 'package:my_demo/generated/json/area_entity_helper.dart';
import 'package:my_demo/model/line_entity.dart';
import 'package:my_demo/generated/json/line_entity_helper.dart';
import 'package:my_demo/model/msg_entity.dart';
import 'package:my_demo/generated/json/msg_entity_helper.dart';
import 'package:my_demo/model/user_entity.dart';
import 'package:my_demo/generated/json/user_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case HotelEntity:
				return hotelEntityFromJson(data as HotelEntity, json) as T;
			case AreaEntity:
				return areaEntityFromJson(data as AreaEntity, json) as T;
			case AreaPointEntity:
				return areaPointEntityFromJson(data as AreaPointEntity, json) as T;
			case LineEntity:
				return lineEntityFromJson(data as LineEntity, json) as T;
			case LineHotel:
				return lineHotelFromJson(data as LineHotel, json) as T;
			case LineArea:
				return lineAreaFromJson(data as LineArea, json) as T;
			case MsgEntity:
				return msgEntityFromJson(data as MsgEntity, json) as T;
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case HotelEntity:
				return hotelEntityToJson(data as HotelEntity);
			case AreaEntity:
				return areaEntityToJson(data as AreaEntity);
			case AreaPointEntity:
				return areaPointEntityToJson(data as AreaPointEntity);
			case LineEntity:
				return lineEntityToJson(data as LineEntity);
			case LineHotel:
				return lineHotelToJson(data as LineHotel);
			case LineArea:
				return lineAreaToJson(data as LineArea);
			case MsgEntity:
				return msgEntityToJson(data as MsgEntity);
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (HotelEntity).toString()){
			return HotelEntity().fromJson(json);
		}	else if(type == (AreaEntity).toString()){
			return AreaEntity().fromJson(json);
		}	else if(type == (AreaPointEntity).toString()){
			return AreaPointEntity().fromJson(json);
		}	else if(type == (LineEntity).toString()){
			return LineEntity().fromJson(json);
		}	else if(type == (LineHotel).toString()){
			return LineHotel().fromJson(json);
		}	else if(type == (LineArea).toString()){
			return LineArea().fromJson(json);
		}	else if(type == (MsgEntity).toString()){
			return MsgEntity().fromJson(json);
		}	else if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<HotelEntity>[] is M){
			return data.map<HotelEntity>((e) => HotelEntity().fromJson(e)).toList() as M;
		}	else if(<AreaEntity>[] is M){
			return data.map<AreaEntity>((e) => AreaEntity().fromJson(e)).toList() as M;
		}	else if(<AreaPointEntity>[] is M){
			return data.map<AreaPointEntity>((e) => AreaPointEntity().fromJson(e)).toList() as M;
		}	else if(<LineEntity>[] is M){
			return data.map<LineEntity>((e) => LineEntity().fromJson(e)).toList() as M;
		}	else if(<LineHotel>[] is M){
			return data.map<LineHotel>((e) => LineHotel().fromJson(e)).toList() as M;
		}	else if(<LineArea>[] is M){
			return data.map<LineArea>((e) => LineArea().fromJson(e)).toList() as M;
		}	else if(<MsgEntity>[] is M){
			return data.map<MsgEntity>((e) => MsgEntity().fromJson(e)).toList() as M;
		}	else if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}